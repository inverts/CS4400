#include "struct.h"
#include "funcs.h"


/* your six struct manipulation functions go here */

/*
 * return a struct containing the same values as the argument struct
 * except that each field has its byte order reversed
 *
 * RESTRICTION: this function must not use arrays or pointers at all;
 * accomplish the byte swapping using shift operators
 */
struct s1 endian_swap_s1_shift (struct s1 input) {
  static const struct s1 empty_s1;
  struct s1 output = empty_s1;
  int i;
  unsigned long long orig_ll = input.f1;
  unsigned long long new_ll = 0;
  //Basically doing an insertion sort for a reverse order.
  for (i=0; i<8; i++) {
    (new_ll << 8) & ((orig_ll >> i) & 0xff)
  }
  output.f1 = new_ll; 
  return output;
}

/*
 * return a struct containing the same values as the argument struct
 * except that each field has its byte order reversed
 *
 * RESTRICTION: this function must not use shift operators;
 * accomplish the byte swapping using pointers and/or arrays
 */
struct s1 endian_swap_s1_ptr (struct s1 input) {
  static const struct s1 empty_s1;
  struct s1 output = empty_s1;
  return output;
}

/*
 * convert a standard (padded) struct into a packed struct containing
 * the same fields
 *
 * the first argument points to a struct s2_packed, the second
 * argument points to a struct s2
 *
 * therefore, your job is to copy data referenced by the second
 * argument into space referenced by the first argument
 *
 * RESTRICTION: all data movement must be through pointer/array
 * operations, no actual struct code is permitted
 */
void pack_s2 (char * s2_in, char * s2_out) {

}

/*
 * convert a packed struct into a stanard (padded) struct containing
 * the same fields
 *
 * the first argument points to a struct s2, the second
 * argument points to a struct s2_packed
 *
 * therefore, your job is to copy data referenced by the second
 * argument into space referenced by the first argument
 *
 * RESTRICTION: all data movement must be through pointer/array
 * operations, no actual struct code is permitted
 */
void unpack_S2 (char * s2_out, char * s2_in) {

}

/*
 * convert a struct with full-width fields into a struct containing
 * bitfields
 *
 * the first argument points to a struct s3_bitfield, the second
 * argument points to a struct s3
 *
 * therefore, your job is to copy data referenced by the second
 * argument into space referenced by the first argument
 *
 * RETURN VALUE: if the value in any full-width field cannot be
 * represented in its corresponding bitfield, return -1; otherwise
 * return 0
 *
 * RESTRICTION: all data movement must be through pointer/array/shift
 * operations, no actual struct code is permitted
 */
int pack_s3 (char * s3_out, char * s3_in) {
  return -1;
}

/*
 * convert a struct with bitfields into a struct containing
 * full-width fields
 *
 * the first argument points to a struct s3, the second
 * argument points to a struct s3_bitfield
 *
 * therefore, your job is to copy data referenced by the second
 * argument into space referenced by the first argument
 *
 * RESTRICTION: all data movement must be through pointer/array/shift
 * operations, no actual struct code is permitted
 */
void unpack_s3 (char * s3_out, char * s3_in) {

}


/* DO NOT put a main() function in this file */

